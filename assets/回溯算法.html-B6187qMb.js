import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as e,o as i}from"./app-qyO_Dsjv.js";const l={};function p(t,s){return i(),a("div",null,s[0]||(s[0]=[e(`<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>void backtracking(参数) {</span></span>
<span class="line"><span>    if (终止条件) {</span></span>
<span class="line"><span>        存放结果;</span></span>
<span class="line"><span>        return;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    for (选择：本层集合中元素（树中节点孩子的数量就是集合的大小）) {</span></span>
<span class="line"><span>        处理节点;</span></span>
<span class="line"><span>        backtracking(路径，选择列表); // 递归</span></span>
<span class="line"><span>        回溯，撤销处理结果</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>回溯法，一般可以解决如下几种问题：</p><ul><li>组合问题：N个数里面按一定规则找出k个数的集合</li><li>切割问题：一个字符串按一定规则有几种切割方式</li><li>子集问题：一个N个数的集合里有多少符合条件的子集</li><li>排列问题：N个数按一定规则全排列，有几种排列方式</li><li>棋盘问题：N皇后，解数独等等</li></ul>`,3)]))}const d=n(l,[["render",p]]),o=JSON.parse('{"path":"/posts/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95.html","title":"回溯算法","lang":"zh-CN","frontmatter":{"title":"回溯算法","description":"回溯法，一般可以解决如下几种问题： 组合问题：N个数里面按一定规则找出k个数的集合 切割问题：一个字符串按一定规则有几种切割方式 子集问题：一个N个数的集合里有多少符合条件的子集 排列问题：N个数按一定规则全排列，有几种排列方式 棋盘问题：N皇后，解数独等等","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"回溯算法\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-08-17T15:47:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"SiYue\\",\\"url\\":\\"https://siyue.top\\"}]}"],["meta",{"property":"og:url","content":"https://siyue.top/my-blog/posts/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95.html"}],["meta",{"property":"og:site_name","content":"肆月的博客"}],["meta",{"property":"og:title","content":"回溯算法"}],["meta",{"property":"og:description","content":"回溯法，一般可以解决如下几种问题： 组合问题：N个数里面按一定规则找出k个数的集合 切割问题：一个字符串按一定规则有几种切割方式 子集问题：一个N个数的集合里有多少符合条件的子集 排列问题：N个数按一定规则全排列，有几种排列方式 棋盘问题：N皇后，解数独等等"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-17T15:47:44.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-17T15:47:44.000Z"}]]},"git":{"createdTime":1755445664000,"updatedTime":1755445664000,"contributors":[{"name":"SiYue","username":"SiYue","email":"2835601846@qq.com","commits":1,"url":"https://github.com/SiYue"}]},"readingTime":{"minutes":0.61,"words":182},"filePathRelative":"posts/回溯算法.md","excerpt":"<div class=\\"language- line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code class=\\"language-\\"><span class=\\"line\\"><span>void backtracking(参数) {</span></span>\\n<span class=\\"line\\"><span>    if (终止条件) {</span></span>\\n<span class=\\"line\\"><span>        存放结果;</span></span>\\n<span class=\\"line\\"><span>        return;</span></span>\\n<span class=\\"line\\"><span>    }</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    for (选择：本层集合中元素（树中节点孩子的数量就是集合的大小）) {</span></span>\\n<span class=\\"line\\"><span>        处理节点;</span></span>\\n<span class=\\"line\\"><span>        backtracking(路径，选择列表); // 递归</span></span>\\n<span class=\\"line\\"><span>        回溯，撤销处理结果</span></span>\\n<span class=\\"line\\"><span>    }</span></span>\\n<span class=\\"line\\"><span>}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{d as comp,o as data};
